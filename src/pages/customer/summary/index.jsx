import { Anchor, Breadcrumbs, Collapse, Textarea } from '@mantine/core';
import dayjs from 'dayjs';
import Head from 'next/head';
import Link from 'next/link';
import Router from 'next/router';
import React, { useEffect, useState } from 'react';
import { FiArrowLeft, FiHome } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { useAppContext } from '../../../AppProvider';
import { OrderSummary } from '../../../components/order-summary';
import { useActions } from './useActions';






const Summary = ({ }) => {
  const [{ generalParameters }] = useAppContext();
  const hourLimit = parseInt(generalParameters.find(item => item.id === 2)?.value || 0);
  const [canOrder, setCanOrder] = useState(true)
  useEffect(() => {
    const countDownDate = dayjs().set('hours', hourLimit).set('minutes', 0).set('seconds', 0).set('millisecond', 0);
    if (countDownDate.diff(dayjs(), 'milliseconds') < 0) {
      setCanOrder(false);
      toast.error('Ya paso el tiempo para poder ordenar por hoy');
    }

    // eslint-disable-next-line
  }, []);

  const { createOrder, order, setOrder } = useActions();

  const items = [
    { title: <FiHome />, href: '/' },
    { title: 'Plato del día', href: '/customer/lunch' },
    { title: 'Resumen', href: '/customer/summary' },
  ].map((item, index) => (
    <Link
      className="text-[#003579] font-semibold italic"
      href={item.href}
      key={index}
    >
      {item.title}
    </Link>
  ));

  // const [ordered, setOrdered] = useState(false);
  // const [opened3, setOpened3] = useState(false);

  // const [counter, setCounter] = useState(1);
  // const [counter2, setCounter2] = useState(1);

  // const handleAdd = () => {
  //   if (counter === 10) {
  //     return;
  //   }
  //   setCounter(counter + 1);
  // };
  // const handleAdd2 = () => {
  //   if (counter2 === 10) {
  //     return;
  //   }
  //   setCounter2(counter2 + 1);
  // };
  // const handleSubstract = () => {
  //   if (counter === 1) {
  //     return;
  //   }
  //   setCounter(counter - 1);
  // };
  // const handleSubstract2 = () => {
  //   if (counter2 === 1) {
  //     return;
  //   }
  //   setCounter2(counter2 - 1);
  // };





  return (
    <div className="w-full flex flex-col gap-6">
      <Head>
        <title>Pa&apos; Come | Resumen</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full max-w-[1750px] mx-auto lg:px-24 px-5">
        <Breadcrumbs separator=">">{items}</Breadcrumbs>
      </div>
      <div className="px-5">
        <div className="w-full lg:max-w-[850px] relative mx-auto bg-white rounded-sm shadow flex flex-col px-6 md:px-14 py-8 gap-8">
          <div className=" text-center flex flex-col gap-2 font-[poppins] text-[#1A579A]">
            <div className="md:absolute flex w-full md:justify-start justify-center lg:-ml-8 md:-mt-4 mb-2 md:mb-0">
              <span
                className=" bg-blue-300 rounded-full p-2 cursor-pointer"
                onClick={() => Router.back()}
              >
                <FiArrowLeft className="text-white w-5 h-5" />
              </span>
            </div>
            <span>Aqui te mostramos tu resumen de Orden</span>
          </div>

          <OrderSummary order={order} setOrder={setOrder} />


          <div className="flex justify-between mt-8 px-10 md:px-24">
            <button
              onClick={() => createOrder({ statusId: 1 })}
              disabled={!canOrder}
              className={
                'bg-blue-500 rounded-lg py-2 hover:bg-blue-400 text-white uppercase font-semibold w-full'
              }
            >
              Agregar al carrito
            </button>
            <button
              onClick={() => createOrder({ statusId: 2 })}
              disabled={!canOrder}
              className={
                true
                  ? 'bg-gray-300 rounded-lg py-2 hover:bg-gray-200 text-white uppercase font-semibold w-full'
                  : 'bg-green-500 rounded-lg py-2 hover:bg-green-400 text-white uppercase font-semibold w-full'
              }
            >
              Ordenar
            </button>
          </div>
          {/* {ordered ? (
            <div className="text-sm flex flex-col justify-center items-center gap-2 text-center italic">
              <div className="flex items-center text-green-500 gap-1 font-semibold">
                <span className="text-base">Orden realizada con éxito</span>
                <FiCheckCircle className="w-4 h-4" />
              </div>
              <Link
                className="underline underline-offset-2 text-blue-400"
                href="/customer/ordenes"
              >
                Ordenes
              </Link>
            </div>
          ) : (
            <div className="text-xs flex justify-center text-center italic text-gray-400">
              Recuerda que 15 minutos despúes de ordenar, no podrás cancelar o
              eliminar
            </div>
          )} */}
        </div>
      </div>
    </div>
  );
};

export default Summary;
